apiVersion: batch/v1
kind: CronJob
metadata:
  name: orchestrator
  namespace: default
spec:
  schedule: "{{ .Values.cron.schedule }}"
  successfulJobsHistoryLimit: {{ .Values.cron.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.cron.failedJobsHistoryLimit }}
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: {{ .Values.cron.backoffLimit }}
      template:
        spec:
          serviceAccountName: orchestrator
          volumes:
            - name: flags
              emptyDir: {}
          containers:
            - name: curl
              image: curlimages/curl:7.78.0
              command:
                - /bin/sh
                - -c
                - |
                  # test istio-proxy
                  until curl -fsI http://localhost:15021/healthz/ready; do
                    echo 'Waiting for Sidecar...'
                    sleep 1
                  done
                  # touch the flag in tmp dir
                  touch /tmp/flags/istio-proxy-ready
                  # then wait for the job to finish
                  until [ -f /tmp/flags/done ]; do
                    echo 'Waiting for the job to finish...'
                    sleep 1
                  done
                  # ask istio-proxy to exit
                  curl -fsI -X POST http://localhost:15020/quitquitquit
              volumeMounts:
                - name: flags
                  mountPath: /tmp/flags
            - image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
              name: collector
              env:
                - name: BACKEND_URL
                  value: {{ .Values.backendUrl }}
                - name: KAFKA_HOST
                  value: {{ .Values.kafkaHost }}
                - name: KAFKA_TOPIC
                  value: {{ .Values.kafkaTopic }}
              resources:
                {{- toYaml .Values.resources | nindent 16 }}
              command:
                - /bin/bash
                - -c
                - |
                  # wait for the flag of istio-proxy
                  until [[ -f /tmp/flags/istio-proxy-ready ]]; do
                    echo 'Waiting for Sidecar...'
                    sleep 1
                  done
                  # do the job
                  python main.py
                  # set the flag so curl can shut down istio-proxy
                  touch /tmp/flags/done
              volumeMounts:
                - name: flags
                  mountPath: /tmp/flags
          restartPolicy: Never
