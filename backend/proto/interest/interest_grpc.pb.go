// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/interest/interest.proto

package interest

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InterestServiceClient is the client API for InterestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterestServiceClient interface {
	AddInterests(ctx context.Context, in *AddInterestsRequest, opts ...grpc.CallOption) (*InterestResponse, error)
	DeleteInterests(ctx context.Context, in *DeleteInterestsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetInterests(ctx context.Context, in *GetInterestsRequest, opts ...grpc.CallOption) (*InterestResponse, error)
}

type interestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterestServiceClient(cc grpc.ClientConnInterface) InterestServiceClient {
	return &interestServiceClient{cc}
}

func (c *interestServiceClient) AddInterests(ctx context.Context, in *AddInterestsRequest, opts ...grpc.CallOption) (*InterestResponse, error) {
	out := new(InterestResponse)
	err := c.cc.Invoke(ctx, "/InterestService/AddInterests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interestServiceClient) DeleteInterests(ctx context.Context, in *DeleteInterestsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/InterestService/DeleteInterests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interestServiceClient) GetInterests(ctx context.Context, in *GetInterestsRequest, opts ...grpc.CallOption) (*InterestResponse, error) {
	out := new(InterestResponse)
	err := c.cc.Invoke(ctx, "/InterestService/GetInterests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterestServiceServer is the server API for InterestService service.
// All implementations must embed UnimplementedInterestServiceServer
// for forward compatibility
type InterestServiceServer interface {
	AddInterests(context.Context, *AddInterestsRequest) (*InterestResponse, error)
	DeleteInterests(context.Context, *DeleteInterestsRequest) (*empty.Empty, error)
	GetInterests(context.Context, *GetInterestsRequest) (*InterestResponse, error)
	mustEmbedUnimplementedInterestServiceServer()
}

// UnimplementedInterestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInterestServiceServer struct {
}

func (UnimplementedInterestServiceServer) AddInterests(context.Context, *AddInterestsRequest) (*InterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInterests not implemented")
}
func (UnimplementedInterestServiceServer) DeleteInterests(context.Context, *DeleteInterestsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterests not implemented")
}
func (UnimplementedInterestServiceServer) GetInterests(context.Context, *GetInterestsRequest) (*InterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterests not implemented")
}
func (UnimplementedInterestServiceServer) mustEmbedUnimplementedInterestServiceServer() {}

// UnsafeInterestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterestServiceServer will
// result in compilation errors.
type UnsafeInterestServiceServer interface {
	mustEmbedUnimplementedInterestServiceServer()
}

func RegisterInterestServiceServer(s grpc.ServiceRegistrar, srv InterestServiceServer) {
	s.RegisterService(&InterestService_ServiceDesc, srv)
}

func _InterestService_AddInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInterestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterestServiceServer).AddInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InterestService/AddInterests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterestServiceServer).AddInterests(ctx, req.(*AddInterestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterestService_DeleteInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInterestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterestServiceServer).DeleteInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InterestService/DeleteInterests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterestServiceServer).DeleteInterests(ctx, req.(*DeleteInterestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterestService_GetInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterestServiceServer).GetInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InterestService/GetInterests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterestServiceServer).GetInterests(ctx, req.(*GetInterestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterestService_ServiceDesc is the grpc.ServiceDesc for InterestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InterestService",
	HandlerType: (*InterestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddInterests",
			Handler:    _InterestService_AddInterests_Handler,
		},
		{
			MethodName: "DeleteInterests",
			Handler:    _InterestService_DeleteInterests_Handler,
		},
		{
			MethodName: "GetInterests",
			Handler:    _InterestService_GetInterests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/interest/interest.proto",
}
