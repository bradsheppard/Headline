/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: proto/topic/topic.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_topic_topic_pb from '../../proto/topic/topic_pb';
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';


export class TopicServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAddTopics = new grpcWeb.MethodDescriptor(
    '/TopicService/AddTopics',
    grpcWeb.MethodType.UNARY,
    proto_topic_topic_pb.AddTopicsRequest,
    proto_topic_topic_pb.TopicResponse,
    (request: proto_topic_topic_pb.AddTopicsRequest) => {
      return request.serializeBinary();
    },
    proto_topic_topic_pb.TopicResponse.deserializeBinary
  );

  addTopics(
    request: proto_topic_topic_pb.AddTopicsRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_topic_topic_pb.TopicResponse>;

  addTopics(
    request: proto_topic_topic_pb.AddTopicsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_topic_topic_pb.TopicResponse) => void): grpcWeb.ClientReadableStream<proto_topic_topic_pb.TopicResponse>;

  addTopics(
    request: proto_topic_topic_pb.AddTopicsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_topic_topic_pb.TopicResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/TopicService/AddTopics',
        request,
        metadata || {},
        this.methodDescriptorAddTopics,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/TopicService/AddTopics',
    request,
    metadata || {},
    this.methodDescriptorAddTopics);
  }

  methodDescriptorGetTopics = new grpcWeb.MethodDescriptor(
    '/TopicService/GetTopics',
    grpcWeb.MethodType.UNARY,
    proto_topic_topic_pb.GetTopicsRequest,
    proto_topic_topic_pb.TopicResponse,
    (request: proto_topic_topic_pb.GetTopicsRequest) => {
      return request.serializeBinary();
    },
    proto_topic_topic_pb.TopicResponse.deserializeBinary
  );

  getTopics(
    request: proto_topic_topic_pb.GetTopicsRequest,
    metadata: grpcWeb.Metadata | null): Promise<proto_topic_topic_pb.TopicResponse>;

  getTopics(
    request: proto_topic_topic_pb.GetTopicsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_topic_topic_pb.TopicResponse) => void): grpcWeb.ClientReadableStream<proto_topic_topic_pb.TopicResponse>;

  getTopics(
    request: proto_topic_topic_pb.GetTopicsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_topic_topic_pb.TopicResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/TopicService/GetTopics',
        request,
        metadata || {},
        this.methodDescriptorGetTopics,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/TopicService/GetTopics',
    request,
    metadata || {},
    this.methodDescriptorGetTopics);
  }

  methodDescriptorRemoveTopics = new grpcWeb.MethodDescriptor(
    '/TopicService/RemoveTopics',
    grpcWeb.MethodType.UNARY,
    proto_topic_topic_pb.RemoveTopicsRequest,
    google_protobuf_empty_pb.Empty,
    (request: proto_topic_topic_pb.RemoveTopicsRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  removeTopics(
    request: proto_topic_topic_pb.RemoveTopicsRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  removeTopics(
    request: proto_topic_topic_pb.RemoveTopicsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  removeTopics(
    request: proto_topic_topic_pb.RemoveTopicsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/TopicService/RemoveTopics',
        request,
        metadata || {},
        this.methodDescriptorRemoveTopics,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/TopicService/RemoveTopics',
    request,
    metadata || {},
    this.methodDescriptorRemoveTopics);
  }

  methodDescriptorGetPendingTopics = new grpcWeb.MethodDescriptor(
    '/TopicService/GetPendingTopics',
    grpcWeb.MethodType.SERVER_STREAMING,
    proto_topic_topic_pb.GetPendingTopicsRequest,
    proto_topic_topic_pb.TopicResponse,
    (request: proto_topic_topic_pb.GetPendingTopicsRequest) => {
      return request.serializeBinary();
    },
    proto_topic_topic_pb.TopicResponse.deserializeBinary
  );

  getPendingTopics(
    request: proto_topic_topic_pb.GetPendingTopicsRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<proto_topic_topic_pb.TopicResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/TopicService/GetPendingTopics',
      request,
      metadata || {},
      this.methodDescriptorGetPendingTopics);
  }

}

