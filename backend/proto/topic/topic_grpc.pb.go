// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/topic/topic.proto

package topic

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TopicServiceClient is the client API for TopicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopicServiceClient interface {
	AddTopics(ctx context.Context, in *AddTopicsRequest, opts ...grpc.CallOption) (*TopicResponse, error)
	GetTopics(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TopicResponse, error)
	RemoveTopics(ctx context.Context, in *RemoveTopicsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetPendingTopics(ctx context.Context, in *GetPendingTopicsRequest, opts ...grpc.CallOption) (TopicService_GetPendingTopicsClient, error)
}

type topicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopicServiceClient(cc grpc.ClientConnInterface) TopicServiceClient {
	return &topicServiceClient{cc}
}

func (c *topicServiceClient) AddTopics(ctx context.Context, in *AddTopicsRequest, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/TopicService/AddTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceClient) GetTopics(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/TopicService/GetTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceClient) RemoveTopics(ctx context.Context, in *RemoveTopicsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/TopicService/RemoveTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceClient) GetPendingTopics(ctx context.Context, in *GetPendingTopicsRequest, opts ...grpc.CallOption) (TopicService_GetPendingTopicsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TopicService_ServiceDesc.Streams[0], "/TopicService/GetPendingTopics", opts...)
	if err != nil {
		return nil, err
	}
	x := &topicServiceGetPendingTopicsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TopicService_GetPendingTopicsClient interface {
	Recv() (*TopicResponse, error)
	grpc.ClientStream
}

type topicServiceGetPendingTopicsClient struct {
	grpc.ClientStream
}

func (x *topicServiceGetPendingTopicsClient) Recv() (*TopicResponse, error) {
	m := new(TopicResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TopicServiceServer is the server API for TopicService service.
// All implementations must embed UnimplementedTopicServiceServer
// for forward compatibility
type TopicServiceServer interface {
	AddTopics(context.Context, *AddTopicsRequest) (*TopicResponse, error)
	GetTopics(context.Context, *empty.Empty) (*TopicResponse, error)
	RemoveTopics(context.Context, *RemoveTopicsRequest) (*empty.Empty, error)
	GetPendingTopics(*GetPendingTopicsRequest, TopicService_GetPendingTopicsServer) error
	mustEmbedUnimplementedTopicServiceServer()
}

// UnimplementedTopicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTopicServiceServer struct {
}

func (UnimplementedTopicServiceServer) AddTopics(context.Context, *AddTopicsRequest) (*TopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTopics not implemented")
}
func (UnimplementedTopicServiceServer) GetTopics(context.Context, *empty.Empty) (*TopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopics not implemented")
}
func (UnimplementedTopicServiceServer) RemoveTopics(context.Context, *RemoveTopicsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTopics not implemented")
}
func (UnimplementedTopicServiceServer) GetPendingTopics(*GetPendingTopicsRequest, TopicService_GetPendingTopicsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPendingTopics not implemented")
}
func (UnimplementedTopicServiceServer) mustEmbedUnimplementedTopicServiceServer() {}

// UnsafeTopicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopicServiceServer will
// result in compilation errors.
type UnsafeTopicServiceServer interface {
	mustEmbedUnimplementedTopicServiceServer()
}

func RegisterTopicServiceServer(s grpc.ServiceRegistrar, srv TopicServiceServer) {
	s.RegisterService(&TopicService_ServiceDesc, srv)
}

func _TopicService_AddTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServiceServer).AddTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TopicService/AddTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServiceServer).AddTopics(ctx, req.(*AddTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicService_GetTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServiceServer).GetTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TopicService/GetTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServiceServer).GetTopics(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicService_RemoveTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServiceServer).RemoveTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TopicService/RemoveTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServiceServer).RemoveTopics(ctx, req.(*RemoveTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicService_GetPendingTopics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPendingTopicsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TopicServiceServer).GetPendingTopics(m, &topicServiceGetPendingTopicsServer{stream})
}

type TopicService_GetPendingTopicsServer interface {
	Send(*TopicResponse) error
	grpc.ServerStream
}

type topicServiceGetPendingTopicsServer struct {
	grpc.ServerStream
}

func (x *topicServiceGetPendingTopicsServer) Send(m *TopicResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TopicService_ServiceDesc is the grpc.ServiceDesc for TopicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TopicService",
	HandlerType: (*TopicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTopics",
			Handler:    _TopicService_AddTopics_Handler,
		},
		{
			MethodName: "GetTopics",
			Handler:    _TopicService_GetTopics_Handler,
		},
		{
			MethodName: "RemoveTopics",
			Handler:    _TopicService_RemoveTopics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPendingTopics",
			Handler:       _TopicService_GetPendingTopics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/topic/topic.proto",
}
