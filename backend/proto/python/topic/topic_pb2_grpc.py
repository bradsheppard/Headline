# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from topic import topic_pb2 as topic_dot_topic__pb2


class TopicServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddTopics = channel.unary_unary(
                '/TopicService/AddTopics',
                request_serializer=topic_dot_topic__pb2.AddTopicsRequest.SerializeToString,
                response_deserializer=topic_dot_topic__pb2.TopicResponse.FromString,
                )
        self.GetTopics = channel.unary_unary(
                '/TopicService/GetTopics',
                request_serializer=topic_dot_topic__pb2.GetTopicsRequest.SerializeToString,
                response_deserializer=topic_dot_topic__pb2.TopicResponse.FromString,
                )
        self.RemoveTopics = channel.unary_unary(
                '/TopicService/RemoveTopics',
                request_serializer=topic_dot_topic__pb2.RemoveTopicsRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.GetPendingTopics = channel.unary_stream(
                '/TopicService/GetPendingTopics',
                request_serializer=topic_dot_topic__pb2.GetPendingTopicsRequest.SerializeToString,
                response_deserializer=topic_dot_topic__pb2.TopicResponse.FromString,
                )


class TopicServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddTopics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTopics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveTopics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPendingTopics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TopicServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTopics,
                    request_deserializer=topic_dot_topic__pb2.AddTopicsRequest.FromString,
                    response_serializer=topic_dot_topic__pb2.TopicResponse.SerializeToString,
            ),
            'GetTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTopics,
                    request_deserializer=topic_dot_topic__pb2.GetTopicsRequest.FromString,
                    response_serializer=topic_dot_topic__pb2.TopicResponse.SerializeToString,
            ),
            'RemoveTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveTopics,
                    request_deserializer=topic_dot_topic__pb2.RemoveTopicsRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetPendingTopics': grpc.unary_stream_rpc_method_handler(
                    servicer.GetPendingTopics,
                    request_deserializer=topic_dot_topic__pb2.GetPendingTopicsRequest.FromString,
                    response_serializer=topic_dot_topic__pb2.TopicResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TopicService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TopicService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TopicService/AddTopics',
            topic_dot_topic__pb2.AddTopicsRequest.SerializeToString,
            topic_dot_topic__pb2.TopicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TopicService/GetTopics',
            topic_dot_topic__pb2.GetTopicsRequest.SerializeToString,
            topic_dot_topic__pb2.TopicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TopicService/RemoveTopics',
            topic_dot_topic__pb2.RemoveTopicsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPendingTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TopicService/GetPendingTopics',
            topic_dot_topic__pb2.GetPendingTopicsRequest.SerializeToString,
            topic_dot_topic__pb2.TopicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
